// Arrays - Methods (–ú–µ—Ç–æ–¥—ã)
// forEach, indexOf, lastIndexOf, find, findIndex,
// some, every, slice, splice, toSpliced,
// filter, map, reduce

const log = console.log;

const skills = ['html', 'css', 'scss', 'js', 'git', 'ts', 'react', 'css'];

// ----------- –ü–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ -------------

// ------- –ü–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ (–ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∫–∞–∫ for, for of) ---------
skills.forEach((value) => log(value));
skills.forEach((value, index) => log(value, index));
skills.forEach((value, index, thisArr) => log(value, index, thisArr));

const logValues = (value) => log(value);
skills.forEach(logValues);

function logValueFn(value) {
  log(value);
}
skills.forEach(logValueFn);


// ----------- –ü–æ–∏—Å–∫ –≤ –º–∞—Å—Å–∏–≤–µ -------------
// indexOf, lastIndexOf (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞)

log(skills.indexOf('js')); // 3 // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å–∏–≤–∞
log(skills.indexOf('js', 2)); // 3
log(skills.indexOf('js', 4)); // -1

log(skills.indexOf('css')); // 1
log(skills.lastIndexOf('css')); // 7

log(skills.indexOf('git')); // 4
log(skills.lastIndexOf('git')); // 4

// -- some, every (–≤–æ–∑–≤—Ä–∞—â–∞—é—Ç true/false –µ—Å–ª–∏ –ø–æ —É—Å–ª–æ–≤–∏—é —ç–ª–µ–º–µ–Ω—Ç / —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã / –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)

const isJs = skills.some((skill) => skill === 'js');
log(isJs); // true
// some() –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–µ–Ω every()
const isJs2 = skills.every((skill) => skill === 'js');
log(isJs2); // false

const phones = [
  { id: 1, title: 'samsungA50' },
  { id: 2, title: 'iphone10' },
  { id: 3, title: 'nokia3310' },
  { id: 4, title: 'xiaomi' }
];

const everyHasTitles = phones.every((phone) => 'title' in phone);
const someHasTitles = phones.some((phone) => 'title' in phone);

log(everyHasTitles); // true
log(someHasTitles); // true

// ----------------- find ------------------
// –Ω–∞—Ö–æ–¥–∏—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ —É—Å–ª–æ–≤–∏—é

const nokia = phones.find((phone) => phone.title === 'nokia3310');
log(nokia); // Object { id: 3, title: "nokia3310" }

const nokiaIndex = phones.findIndex((phone) => phone.title === 'nokia3310');
log(nokiaIndex); // 2

const filteredSkills = skills.filter((skill) => skill.includes('c'));
log(filteredSkills); // Array(4) [ "css", "scss", "react", "css" ]

const evenNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].filter(num => num % 2 === 0);
log(evenNumbers); // Array(5) [ 2, 4, 6, 8, 10 ]

const clients = [
  { id: 1, level: 3, name: 'Lucy', status: 'online' },
  { id: 2, level: 1, name: 'Rick', status: 'offline' },
  { id: 3, level: 3, name: 'Jack', status: 'online' },
  { id: 4, level: 2, name: 'Helen', status: 'online' },
  { id: 5, level: 1, name: 'Alice', status: 'offline' },
  { id: 6, level: 1, name: 'Derek', status: 'offline' },
  { id: 7, level: 3, name: 'Megan', status: 'online' },
];

const clientsWithHightLevel = clients.filter(client => client.level === 3);
log(clientsWithHightLevel);
/* 
  Array(3) [ {‚Ä¶}, {‚Ä¶}, {‚Ä¶} ]
  0: Object { id: 1, level: 3, name: "Lucy", ‚Ä¶ }
  1: Object { id: 3, level: 3, name: "Jack", ‚Ä¶ }
  2: Object { id: 7, level: 3, name: "Megan", ‚Ä¶ } 
*/

/* 
  slice - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, –≤ –∫–æ—Ç–æ—Ä—ã–π –∫–æ–ø–∏—Ä—É–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∏–Ω–¥–µ–∫—Å–∞ star –¥–∞ end
*/

const newPhones = phones.slice(0, 2);
log(newPhones);

/* 
  Array [ {‚Ä¶}, {‚Ä¶} ]
  0: Object { id: 1, title: "samsungA50" }
  1: Object { id: 2, title: "iphone10" } 
*/

// delete phones[nokiaIndex];
// log(phones);

/* 
  Array(4) [ {‚Ä¶}, {‚Ä¶}, <1 empty slot>, {‚Ä¶} ]
  0: Object { id: 1, title: "samsungA50" }
  1: Object { id: 2, title: "iphone10" }
  3: Object { id: 4, title: "xiaomi" } 
  –¥–ª–∏–Ω–∞ —É –Ω–µ–≥–æ –≤—Å–µ —Ä–∞–≤–Ω–æ 4, –ª—É—á—à–µ —Ç–∞–∫–æ–π –º–µ—Ç–æ–¥ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
*/

/* 
  splice - –∏–∑–º–µ–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤, —É–º–µ–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å, —É–¥–∞–ª—è—Ç—å –∏ –∑–∞–º–µ–Ω—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã
*/

log(phones.splice(nokiaIndex, 1)); // 0: Object { id: 3, title: "nokia3310" }
log(phones);

/* 
  Array(3) [ {‚Ä¶}, {‚Ä¶}, {‚Ä¶} ]
  0: Object { id: 1, title: "samsungA50" }
  1: Object { id: 2, title: "iphone10" }
  2: Object { id: 4, title: "xiaomi" } 
*/

log(phones.splice(1, 0, {id: 5, title: 'iphone16'})); // []
log(phones);

/* 
  Array(4) [ {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶} ]
  0: Object { id: 1, title: "samsungA50" }
  1: Object { id: 5, title: "iphone16" }
  2: Object { id: 2, title: "iphone10" }
  3: Object { id: 4, title: "xiaomi" } 
*/

/*
  toSpliced, —Ç–æ—Ç –∂–µ splice, –Ω–æ —Ç–æ–ª—å–∫–æ –¥–µ–ª–∞–µ—Ç –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞, –∞ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤
*/

const phones2025 = phones.toSpliced();
log(phones);

/* 
  Array(4) [ {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶} ]
  0: Object { id: 1, title: "samsungA50" }
  1: Object { id: 5, title: "iphone16" }
  2: Object { id: 2, title: "iphone10" }
  3: Object { id: 4, title: "xiaomi" } 
*/

const phones2025_2 = phones.toSpliced(2, 1, { id: 5, title: "iphone16" });
log(phones2025_2);

/* 
  Array(4) [ {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶} ]
  0: Object { id: 1, title: "samsungA50" }
  1: Object { id: 5, title: "iphone16" }
  2: Object { id: 5, title: "iphone16" }
  3: Object { id: 4, title: "xiaomi" } 
*/

// ----- –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ------

const str = 'hello';
log(str.split('')); // Array(5) [ "h", "e", "l", "l", "o" ]
log(str.split('').reverse()); // Array(5) [ "o", "l", "l", "e", "h" ]
log(str.split('').reverse().join('')); // olleh

// --------------------------------------------------------

/*
  map - –æ–¥–∏–Ω –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω—ã—Ö –∏ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö.

  map - –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞ 
  –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
*/

const clientNames = clients.map(client => client.name);
log(clientNames); // Array(7) [ "Lucy", "Rick", "Jack", "Helen", "Alice", "Derek", "Megan" ]

// 2-–π –≤–∞—Ä–∏–∞–Ω—Ç —Ä–µ—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—è {} –∏ return
// const clientNames = clients.map(client => {
//   return client.name
// });

const clientNamesAndStatuses = clients.map(client => {
  return {
    age: Math.random() * 50 + 30,
    name: client.name,
    status: client.status
  }
});

log(clientNamesAndStatuses);

/* 
  Array(7) [ {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶} ]
  0: Object { age: 43.06233835725487, name: "Lucy", status: "online" }
  1: Object { age: 54.03797938519695, name: "Rick", status: "offline" }
  2: Object { age: 51.72938227893147, name: "Jack", status: "online" }
  3: Object { age: 40.593154008800084, name: "Helen", status: "online" }
  4: Object { age: 76.95601729537722, name: "Alice", status: "offline" }
  5: Object { age: 55.9931481141255, name: "Derek", status: "offline" }
  6: Object { age: 37.60279166009777, name: "Megan", status: "online" }
*/

const clientNamesAndStatuses2 = clients.map(client => {
  return {
    name: client.name,
    status: client.status
  }
}).map(client => {
  if (client.status === 'online') {
    client.status = 'online ü§î'
  } else {
    client.status = 'offline ü•±'
  }

  return client;
});

log(clientNamesAndStatuses2);

/* 
  Array(7) [ {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶} ]
  0: Object { name: "Lucy", status: "online ü§î" }
  1: Object { name: "Rick", status: "offline ü•±" }
  2: Object { name: "Jack", status: "online ü§î" }
  3: Object { name: "Helen", status: "online ü§î" }
  4: Object { name: "Alice", status: "offline ü•±" }
  5: Object { name: "Derek", status: "offline ü•±" }
  6: Object { name: "Megan", status: "online ü§î" } 
*/

const clientNamesAndStatuses3 = clients.map(client => {
  return {
    name: client.name,
    status: client.status
  }
}).map(client => {
  if (client.status === 'online') {
    client.status = 'online ü§î'
  } else {
    client.status = 'offline ü•±'
  }

  return client;
}).filter(c => c.status.startsWith('on'));

log(clientNamesAndStatuses3);

/* 
  Array(4) [ {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶} ]
  0: Object { name: "Lucy", status: "online ü§î" }
  1: Object { name: "Jack", status: "online ü§î" }
  2: Object { name: "Helen", status: "online ü§î" }
  3: Object { name: "Megan", status: "online ü§î" }
*/

// ---------------------------------------------------------------------

/*
  reduce -> –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –µ–¥–∏–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ–≥–æ –º–∞—Å—Å–∏–≤–∞

  arr.reduce((accumulator, item, index, array) => {
    // ...
  }, [initial]);

  –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
  accumulator - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤—ã–∑–æ–≤–∞ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, —Ä–∞–≤–µ–Ω initial –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ 
  (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω initial)
  item - –æ—á–µ—Ä–µ–¥–Ω–æ–π —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞
  index - –µ–≥–æ –ø–æ–∑–∏—Ü–∏—è
  array - —Å–∞–º –º–∞—Å—Å–∏–≤
*/

const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
// 1-–π –≤–∞—Ä–∏–∞–Ω—Ç —Ä–µ—à–µ–Ω–∏—è 
const sumAllNumbers = numbers.reduce((accumulator, currentValue) => {
  return accumulator + currentValue;
  // —Ç—É—Ç –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ç–∞–∫–æ–π: 0 + 1 = 1; 1 + 2 = 3; 3 + 3 = 6; 4 + 6 = 10 –∏ —Ç.–¥. –∏ –ø–æ–ª—É—á–∏–º 55
}, 0);

// 2-–π –≤–∞—Ä–∏–∞–Ω—Ç —Ä–µ—à–µ–Ω–∏—è 
// const sumAllNumbers = numbers.reduce((s, v) => s + v, 0);

log(sumAllNumbers); // 55

const books = [
  { id: 1, title: '–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä', price: 59, category: 'fantasy' },
  { id: 2, title: '–ß–∏—Å—Ç—ã–π –∫–æ–¥', price: 109, category: 'science' },
  { id: 3, title: '–¢–µ–º–Ω–∞—è –ë–∞—à–Ω—è', price: 149, category: 'fantasy' },
  { id: 4, title: '–ì—Ä–æ—Ö–∞–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º—ã', price: 173, category: 'science' },
  { id: 5, title: '–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π JavaScript', price: 79, category: 'science' }
];

const totalPrice = books.reduce((sum, book) => sum + book.price, 0);
log(totalPrice); // 569

// {
//   fantasy: 2,
//   science: 3
// }

const categoryMap = books.reduce((res, book) => {
  if (book.category in res) { // –µ—Å–ª–∏ –µ—Å—Ç—å –≤ –æ–±—ä–µ–∫—Ç–µ —Ç–∞–∫–æ–µ –ø–æ–ª–µ
    res[book.category]++
  } else {
    res[book.category] = 1;
  }

  return res;
}, {});

// –∏–ª–∏ –≤—Ç–æ—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ 
let categoriesCount = 0;
const categoryMap2 = books.reduce((res, book) => {
  if (book.category in res) { // –µ—Å–ª–∏ –µ—Å—Ç—å –≤ –æ–±—ä–µ–∫—Ç–µ —Ç–∞–∫–æ–µ –ø–æ–ª–µ
    res[book.category]++;
  } else {
    res[book.category] = 1;
    categoriesCount++;
  }

  return res;
}, {});

log(categoryMap); // Object { fantasy: 2, science: 3 }
log(categoriesCount); // 2

log(Object.keys(categoryMap)); // Array [ "fantasy", "science" ]
log(Object.keys(categoryMap).length); // 2  
 

