// Logical operators - Логические операторы
// ||, &&, !, !!, ??

// || - Логическое ИЛИ
// || - Возвращает первое положительное truthy значение или последнее значение
// || - Находит первое истинное значение или возвращает последний операнд

let a;

a = 1 || 2; // 1
a = 0 || 2; // 2

a = true || false; // true
a = false || true; // true
a = false || false; // false // тут получаем последний операнд

a = false || false || true; // true
a = null || undefined || 1; // true

console.log(a); // 1

const age = 25;

if (age > 20 || age < 25) { // сработало первое условие age > 20
  console.log('Вы приняты');
}

if (age < 20 || age >= 25) { // сработало второе условие age >= 25
  console.log('Вы приняты');
}

// ----------------------------------

// && - Логическое И
// && - при проверках возвращает true, если оба аргумента истины, а иначе - false
// && - или возвращает первое ложное значение как результат выражения

/* 
  Вычисляет операнды слева направо.
  Каждый операнд преобразует в логическое значение. Если результат false,
  останавливается и возвращает исходное значение этого операнда.
  Если все операнды были истинными, возвращает последний.

  Другими словами, && (И) возвращает первое ложное значение. Или последнее, если ничего не найдено

  Разница в том, что && (И) возвращает первое ложное значение , а || (ИЛИ) первое истинное
*/ 

// операнд - это например age < 20

let b;

if (0 && 5) { // 0 , а значит условие не выполнится
  console.log('Это сообщение никто не увидит!');
}

b = 0 && 5; // 0
b = true && 'dd'; // 'dd'
// часто встречаем эту запись на react: { isLoading && <div></div>}

if (true && 'dd') { // 'dd' , а значит условие выполнится, так как два аргумента правдивые 
  console.log('Это сообщение увидит весь мир!');
}

console.log(b);

const check = 10 && 0 && 20 && 'Hello'; // 0

console.log(check);

const hour = 10;
const minutes = 35;

if ( hour >= 10 && minutes >= 30) { 
  console.log('Заходите сюда!!');
}

// ----------------------------------

// ! - Логическое отрицание. По сути меняет значение на противоположное.

/*  
  Оператор принимает один аргумент и выполняет следующие действия:

  2) Сначала приводит аргумент к логическому типу true/false.
  2) Затем возвращает противоположное значение
*/

let c;

c = !true; // false
c = !false; // true
c = !0; // true
c = !'Hello!'; // false
c = !''; // true

// ----------------------------------

// !! - для преобразования значений к логическому (boolean) типу

c = !!'Hello!'; // true
c = !!''; // false
c = 0; // false
c = !!1; // true
c = !!null; // false

c = Boolean(1) // true // т.е. !! и Boolean() выполняют одинаковую задачу

console.log(c); 

// ----------------------------------

// ?? - это оператор нулевого слияния
// ?? - Возвращает правый операнд если левый равен null или undefined, иначе возвращает левый операнд

let d;

d = 1 ?? 2; // 1
d = null ?? 2; // 2
d = undefined ?? 2; // 2
d = false ?? 2; // false
d = true ?? 2; // true
d = '' ?? 2; // в консоли ничего не выдало , только такое значение выдало <empty string>
d = 0 ?? 10; // 0
d = null ?? false; // false

console.log(d);

